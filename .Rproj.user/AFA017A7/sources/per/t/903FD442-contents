library(data.table)
library(readxl)
library(ggplot2)
library(mc2d)
theme_set(theme_bw())

### Functions 
sim_markov <- function(init, t_matrix, age_start, all_cause_mort,
                       costs){
  #t matrix is missing death, we add in at each step
  
  #Simulate by year from age_start to age 95
  iters <- 95 - age_start + 1
  nstates <- nrow(t_matrix)+1
  state_names <- c(colnames(t_matrix), "death")
  
  markov_trace <- matrix( nrow = iters, ncol = length(state_names),
                          dimnames = list("Age" = age_start:95, 
                                          "State" = state_names))
  
  cost_by_state_trace <-  matrix( nrow = iters-1, ncol = length(state_names),
                                  dimnames = list("Age" = age_start:94, 
                                                  "State" = state_names))
  # colnames(markov_trace) <- c(colnames(t_matrix), "death")
  # rownames(markov_trace) <- age_start:95
  
  # First row has initial condition
  markov_trace[as.character(age_start), ] <- init
  
  #Calculate costs and store here
  tot_cost_by_year <- matrix(0, nrow = iters, ncol = 1)#,
                          #dimnames = list("Age" = age_start:95, NA))
  
  cost_mults <- structure(numeric(length(state_names)), names = state_names)
  
  for(state in state_names){
    cost_mults[state] <- unlist(costs[state])
  }
  
  for (i in 1:(iters-1)){
    curr_age = age_start+i
    #get probability of all-cause death
    p_death <- all_cause_mort[findInterval(curr_age, all_cause_mort$age)]$p_death
    #Create temporary transition matrix that encorporates probability of all cause death 
    #  and down-weights all other transitions so it still sums to 1
    t_matrix_temp <- rbind(cbind(t_matrix*(1-p_death), death = p_death), death = c(rep(0, ncol(t_matrix)), 1))
    #Correct the death for cause column (HIV_death, HCV_death, HBV death).
    # Must always be last row/col before death added
    t_matrix_temp[nrow(t_matrix_temp) - 1, ncol(t_matrix_temp) - 1 ] <- 1
    t_matrix_temp[nrow(t_matrix_temp) - 1, ncol(t_matrix_temp)] <- 0
    
    #Apply markovian transition
    current_dist <-  markov_trace[i , ]
    markov_trace[i+1, ] <- current_dist %*% t_matrix_temp
    
    prop_from_to <- (matrix(rep(current_dist, each = nstates), nrow = nstates, byrow = TRUE) *
                       t_matrix_temp)
    cost_by_state <- (0.5*rowSums(prop_from_to) + 0.5*colSums(prop_from_to))*cost_mults
    #Calculate costs at timestep using cycle tree correction
    tot_cost_by_year[i, ] <- sum(cost_by_state)
    
    cost_by_state_trace[i, ] <- cost_by_state
    
  }
  
  tot_costs_by_year <- rowSums(cost_by_state_trace)
  np_cost <- sum(tot_costs_by_year * 1.03^(0:(-1*(iters-2))))
  
  return(list("markov_trace" = markov_trace, "tot_cost_by_year" = tot_cost_by_year,
              "np_cost" = np_cost, "cost_by_state_trace" = cost_by_state_trace))
}


gen_t_matrix <- function(transitions, disease, cohort = "Adult"){
  transitions <- transitions[From != "init"]
  
  #State names (excludes all cause death; that's added in Sim_Markov)
  states <- list(hcv = c('acute_SC', 'acute_T', 'no_infection', 'chronic_SC', 'chronic_T', 
                         'chronic_TF', 'CC_SC', 'CC_T', 'CC_TF', 'DCC_SC', 'DCC_T', 'DCC_TF', 
                         'HCC', 'HCV_death'),
                 hbv = c('acute_SC', 'acute_CM', 'imm_tol_SC', 'imm_tol_CM', 'carrier_SC', 
                         'carrier_CM', 'imm_react_SC', 'imm_react_T', 'chronic_SC', 
                         'chronic_CM', 'chronic_T', 'CC_SC', 'CC_T', 'DCC_SC', 'DCC_T', 'HCC', 
                         'no_infection', 'HBV_death'),
                 hiv = c('HIV_SC_1', 'HIV_SC_2', 'HIV_SC_3', 'ART_1', 'ART_2', 'ART_3', 'ART_4', 
                         'AIDS_SC', 'AIDS_ART_1', 'AIDS_ART_2', 'HIV_death'))
  
  #Create empty transition vector
  t_matrix <- matrix(0L, nrow = length(states[[disease]]), ncol = length(states[[disease]]),
                  dimnames = list("From" = states[[disease]],
                              "To" = states[[disease]]))
  
  
  
  #Load in natural history parameters and treatment effectiveness
  t_nat_hist_params <- transitions[Disease == toupper(disease) & Category != "Treatment uptake" &
                                     `Base case` != "#" & Cohort %in% c("Both", cohort)]
  t_nat_hist_params[ , value := as.numeric(value)]
  for (row in 1:nrow(t_nat_hist_params)){
    t_matrix[t_nat_hist_params[row, From],
             t_nat_hist_params[row, To]] <- t_nat_hist_params[row, value]
  }
  
  #If HCV, handle special case of acute AVT treatment failure
  if(disease == "hcv"){
    t_matrix["acute_T", "no_infection"] <-  1 - (1-t_matrix["acute_SC", "no_infection"])*(1-t_matrix["acute_T", "no_infection"])
  }
  
  #Handle remainders for natural history model
  t_nat_hist_remainders <- transitions[Disease == toupper(disease) & Category != "Treatment uptake" & 
                                         `Base case` == "#" & Cohort %in% c("Both", cohort)]
  for (row in 1:nrow(t_nat_hist_remainders)){
    t_matrix[t_nat_hist_remainders[row, From],
             t_nat_hist_remainders[row, To]] <- 1 - sum(t_matrix[t_nat_hist_remainders[row, From], ])
  }
  
  #Factor in treatment uptake
  t_treatment <- transitions[Disease == toupper(disease) & Category == "Treatment uptake" &
                               Cohort %in% c("Both", cohort)]
  t_treatment[ , value := as.numeric(value)]
  for (row in 1:nrow(t_treatment)){
    t_matrix[t_treatment[row, From], ] <- t_matrix[t_treatment[row, From], ]*(1-t_treatment[row, value])
    t_matrix[t_treatment[row, From],
             t_treatment[row, To]] <- t_treatment[row, value]
  }
  

  

  
  t_matrix
  rowSums(t_matrix)
  
  
  return(t_matrix)
}
calc_disease_state_costs <- function(prm){
  cost_mult_acute_from_IPmort <- (1 - prm$p_IPmort + prm$p_IPmort*prm$p_acute_c_mort)
  
  
  c_disease_states <- list()
  c_disease_states$sep <- (prm$c_IP_day*prm$sep_d_IP_days + 
                               prm$sep_p_meds*prm$sep_c_meds)*cost_mult_acute_from_IPmort
  
  c_disease_states$mal <- (prm$c_IP_day*prm$mal_p_IP_days*prm$mal_d_IP_days +
                             prm$mal_p_OP*prm$mal_n_OP*prm$mal_c_OP+
                             prm$mal_c_diag+prm$mal_c_meds)*cost_mult_acute_from_IPmort
  c_disease_states$ftr <- (prm$ftr_c_meds+
                             prm$ftr_n_IP_days*prm$ftr_p_IP_days*prm$c_IP_day)*cost_mult_acute_from_IPmort
  c_disease_states$syp <- (prm$syp_p_diag*(prm$syp_c_diag+prm$syp_c_meds))*cost_mult_acute_from_IPmort
  
  #HIV
  c_HIV_states <- list()
  c_HIV_states$HIV_SC_1 <- 0
  c_HIV_states$HIV_SC_2 <- 0
  c_HIV_states$HIV_SC_3 <- 0
  c_HIV_states$ART_1 <- prm$hiv_cost_ART1
  c_HIV_states$ART_2 <- prm$hiv_cost_ART2
  c_HIV_states$ART_3 <- prm$hiv_cost_ART3
  c_HIV_states$ART_4 <- prm$hiv_cost_ART4
  c_HIV_states$AIDS_SC <- prm$hiv_cost_AIDS_SC
  c_HIV_states$AIDS_ART_1 <- prm$hiv_cost_AIDS_ART_1
  c_HIV_states$AIDS_ART_2 <- prm$hiv_cost_AIDS_ART_2
  c_HIV_states$HIV_death <- 0
  c_HIV_states$death <- 0
  
  #HBV
  c_HBV_states <- list()
  c_HBV_states$acute_SC <- 0
  c_HBV_states$acute_CM <- (2*prm$hbv_c_HBsAg+prm$hbv_c_profile+
                           prm$hbv_c_DNAtest+prm$hep_c_OP_extensive+
                           prm$hep_c_OP_brief)
  c_HBV_states$no_infection <- 0
  c_HBV_states$imm_tol_CM <- (prm$hep_c_OP_extensive+prm$hbv_c_HBsAg+
                             prm$hbv_c_profile+prm$hbv_c_DNAtest+prm$hep_c_lft)
  c_HBV_states$imm_tol_SC <- 0
  c_HBV_states$carrier_CM <- 0
  c_HBV_states$carrier_SC <- 0
  c_HBV_states$imm_react_T <- (prm$hep_c_OP_extensive+prm$hbv_c_HBsAg+
                                 prm$hbv_c_profile+prm$hbv_c_antivirals+
                                 prm$hbv_c_DNAtest+prm$hep_c_lft)
  c_HBV_states$imm_react_SC <- 0
  c_HBV_states$chronic_SC <- 0
  c_HBV_states$chronic_CM <- (prm$hep_c_lft+prm$hep_c_BUNCE+
                             prm$hep_c_FBC+prm$hep_c_alphafeto+
                             prm$hep_c_ab_ultrasono+
                             prm$hep_c_OP_brief*prm$hbv_n_OP_chronic+
                             prm$hbv_c_profile + prm$hbv_c_DNAtest)
  c_HBV_states$chronic_T <- (prm$hep_c_lft+prm$hep_c_BUNCE+
                               prm$hep_c_FBC+prm$hep_c_alphafeto+
                               prm$hep_c_ab_ultrasono+
                               prm$hep_c_OP_brief*prm$hbv_n_OP_chronicT+
                               prm$hbv_c_antivirals+prm$hbv_c_profile + prm$hbv_c_DNAtest)
  c_HBV_states$CC_SC <- 0
  c_HBV_states$CC_T <- (prm$hep_c_lft + prm$hep_c_INR + prm$hep_c_BUNCE + 
                          prm$hep_c_FBC + 2*prm$hep_c_alphafeto + 
                          2*prm$hep_c_ab_ultrasono + 2*prm$hbv_c_DNAtest + 
                          prm$hep_c_OP_brief*prm$hbv_n_OP_CCT+
                          prm$hbv_c_antiviralsCirrhosis)
  c_HBV_states$DCC_SC <- 0
  c_HBV_states$DCC_T <- (prm$hep_c_lft + prm$hep_c_INR + prm$hep_c_BUNCE + 
                           prm$hep_c_FBC + 2*prm$hep_c_alphafeto + 
                           2*prm$hep_c_ab_ultrasono + 2*prm$hbv_c_DNAtest + 
                           2*prm$hep_c_band_lig + prm$hep_c_spiro + 
                           prm$hep_c_fluro + 
                           prm$hep_c_OP_brief*prm$hbv_n_OP_DCCT + 
                           prm$hbv_c_antiviralsCirrhosis)
  
  c_HBV_states$HCC <- (prm$hep_c_lft + prm$hep_c_INR + prm$hep_c_FBC + 
                         prm$hep_c_alphafeto + prm$hep_c_triphas_CT + 
                         prm$hep_c_band_lig + prm$hep_c_sorafenib +
                         prm$hep_c_chemoembo)
  c_HBV_states$HBV_death <- 0
  c_HBV_states$death <- 0
  
  c_HCV_states <- list()
  c_HCV_states$acute_SC <- 0
  c_HCV_states$acute_T <- (prm$hcv_c_screen + 2*prm$hcv_c_rna_test + 
                           prm$hcv_c_genotype + 
                             prm$hep_c_lft + prm$hep_c_BUNCE +
                             prm$hcv_c_antivirals+
                             prm$hep_c_OP_brief*prm$hcv_n_OP_acuteT)
                             
                            
  c_HCV_states$no_infection <- 0
  c_HCV_states$chronic_SC <- 0
  c_HCV_states$chronic_T <- (prm$hep_c_lft + prm$hep_c_BUNCE + 
                               prm$hep_c_FBC + prm$hep_c_alphafeto +
                               prm$hep_c_ab_ultrasono + 
                               prm$hcv_c_genotype + 2*prm$hcv_c_rna_test+
                               prm$hcv_n_OP_chronic*prm$hep_c_OP_brief+
                               prm$hcv_c_antivirals)
  c_HCV_states$chronic_TF <- (prm$hep_c_lft + prm$hep_c_BUNCE + 
                               prm$hep_c_FBC + prm$hep_c_alphafeto +
                               prm$hep_c_ab_ultrasono + 
                               prm$hcv_c_genotype + 2*prm$hcv_c_rna_test+
                               prm$hcv_n_OP_chronic*prm$hep_c_OP_brief)
  
  c_HCV_states$CC_SC <- 0
  c_HCV_states$CC_T <- (prm$hep_c_lft + prm$hep_c_INR + prm$hep_c_BUNCE + 
                          prm$hep_c_FBC + 2*prm$hep_c_alphafeto + 
                          2*prm$hep_c_ab_ultrasono + 2*prm$hcv_c_rna_test + 
                          prm$hcv_c_genotype+
                          prm$hcv_n_OP_cc*prm$hep_c_OP_brief+
                          prm$hcv_c_antivirals)
  c_HCV_states$CC_TF <- (prm$hep_c_lft + prm$hep_c_INR + prm$hep_c_BUNCE + 
                          prm$hep_c_FBC + 2*prm$hep_c_alphafeto + 
                          2*prm$hep_c_ab_ultrasono + 2*prm$hcv_c_rna_test + 
                          prm$hcv_c_genotype+
                          prm$hcv_n_OP_cc*prm$hep_c_OP_brief)
  c_HCV_states$DCC_SC <- 0
  
  c_HCV_states$DCC_T <- (prm$hep_c_lft + prm$hep_c_INR + prm$hep_c_BUNCE + 
                           prm$hep_c_FBC + 2*prm$hep_c_alphafeto + 
                           2*prm$hep_c_ab_ultrasono + 3*prm$hcv_c_rna_test + 
                           2*prm$hep_c_band_lig + prm$hep_c_spiro + 
                           prm$hcv_c_genotype+
                           prm$hep_c_fluro  + prm$hcv_n_OP_dcc*prm$hep_c_OP_brief+
                           prm$hcv_c_antiviral_dcc)
  c_HCV_states$DCC_TF <- (prm$hep_c_lft + prm$hep_c_INR + prm$hep_c_BUNCE + 
                           prm$hep_c_FBC + 2*prm$hep_c_alphafeto + 
                           2*prm$hep_c_ab_ultrasono + 3*prm$hcv_c_rna_test + 
                           2*prm$hep_c_band_lig + prm$hep_c_spiro + 
                           prm$hcv_c_genotype+
                           prm$hep_c_fluro  + prm$hcv_n_OP_dcc*prm$hep_c_OP_brief)
  
  c_HCV_states$HCC <- (prm$hep_c_lft + prm$hep_c_INR + prm$hep_c_FBC + 
                         prm$hep_c_alphafeto + prm$hep_c_triphas_CT + 
                         prm$hep_c_band_lig + prm$hep_c_sorafenib +
                         prm$hep_c_chemoembo)
  c_HCV_states$HCV_death <- 0
  c_HCV_states$death <- 0
  
  c_disease_states$HIV <- c_HIV_states
  c_disease_states$HCV <- c_HCV_states
  c_disease_states$HBV <- c_HBV_states
  return(c_disease_states)
}
rtriang<- function(mean, lb, ub, n=1){
  mode = 3*mean - lb - ub
  if (mode < lb){
    print(paste0(
      "Cannot achieve desired expected value with lower bound of ", lb, "."
    ))
    lb = (3*mean - ub)/2
    mode=lb
    print(paste0(
      "Reset lb to ", lb, "."
    ))
  } else if (mode > ub) {
    print(paste0(
      "Cannot achieve desired expected value with upper bound of ", ub, "."
    ))
    ub = (3*mean - lb)/2
    mode=ub
    print(paste0(
      "Reset upper bound to ", ub, "."
    ))
  } 
  
  Fmode <- (mode - lb)/(ub - lb)
  U <- runif(n)
  rtris <- ifelse(U < Fmode, 
                  lb + (U*(ub - lb)*(mode - lb))^.5,
                  ub - ((1-U)*(ub - lb)*(ub - mode))^.5
                  )
  
  return(rtris)
}
rpert_mean<- function(mean, lb, ub, n=1, adjust_bounds = FALSE){
  mode = (6*mean - lb - ub)/4
  if (adjust_bounds == TRUE){
    if (mode < lb){
      print(paste0(
        #"Cannot achieve desired expected value with upper bound of ", ub, "."
      ))
      ub = 6*mean - 5*lb
      mode=lb
      print(paste0(
        #"Reset upper bound to ", ub, "."
      ))
    } else if (mode > ub) {
      print(paste0(
        #"Cannot achieve desired expected value with lower bound of ", lb, "."
      ))
      lb = 6*mean - 5*ub
      mode=ub
      print(paste0(
        #"Reset lower bound to ", lb, "."
      ))
    } 
  } else {
    if (mode < lb){
      mode = lb
      #print(paste0("Set mode to lower bound. Mean will be ", (5*lb+ub)/6,
      #             "instead of ", mean))
    } else if (mode > ub) {
      mode = ub
      #print(paste0("Set mode to lower bound. Mean will be ", (5*ub+lb)/6,
      #             "instead of ", mean))
    } 
  }
  return(rpert(n, lb, mode, ub))
}
sample_params<- function(mean, lb,ub, dist,Param1, Param2=Param2){
  if(dist == "PERT" & !is.na(dist)){
    return(rpert_mean(mean, lb, ub))
  } else if (dist == "Beta" & !is.na(dist) ) {
    return(rbeta(1, Param1, Param2))
  } else{
    return(mean)
  }
}
calc_outcomes <- function(costs_np, params){
  aes <- c("hiv", "sep", "hcv", "hbv",
          "syp", "mal", "ftr")
  outcomes <- list()
  
  outcomes["prt_cost"] <- params$c_PI*(1+params$p_waste)*params$n_comp
  
  for (ae in aes){
    cases_no_prt <-  (params$n_comp*
                       params[[paste0("bl_",ae)]]*
                       params[[paste0("p_clin_",ae)]])
    
    cases_prt <- cases_no_prt/params[[paste0("rred_",ae)]]
    
    cases_reduced <- cases_no_prt - cases_prt 
    
    burden_no_prt <- cases_no_prt*costs_np[[ae]]
    burden_prt <- cases_prt*costs_np[[ae]]
    burden_reduced <- cases_reduced*costs_np[[ae]]
    
    outcomes[[ae]]<- list(
      "cases_no_prt" = cases_no_prt,
      "cases_prt" = cases_prt,
      "cases_reduced" = cases_reduced,
      "burden_no_prt" = burden_no_prt,
      "burden_prt" = burden_prt,
      "burden_reduced" = burden_reduced
    )
  }
  
  dt_outcomes <- data.table(rbind(unlist(outcomes)))
  dt_outcomes[ , all_ae.cases_no_prt := sum(.SD), .SDcols = paste0(aes,".cases_no_prt")]
  dt_outcomes[ , all_ae.cases_prt := sum(.SD), .SDcols = paste0(aes,".cases_prt")]
  dt_outcomes[ , all_ae.cases_reduced := sum(.SD), .SDcols = paste0(aes,".cases_reduced")]
  dt_outcomes[ , all_ae.burden_no_prt := sum(.SD), .SDcols = paste0(aes,".burden_no_prt")]
  dt_outcomes[ , all_ae.burden_prt := sum(.SD), .SDcols = paste0(aes,".burden_prt")]
  dt_outcomes[ , all_ae.burden_reduced := sum(.SD), .SDcols = paste0(aes,".burden_reduced")]
  dt_outcomes[ , net_savings := all_ae.burden_reduced - prt_cost]
  return(dt_outcomes)
}
calc_univariate_change <- function(param, value, dt_transitions, dt_microcost_params, dt_other_params){
  #RUN BASECASE
  dt_transitions[ , value := `Base case`]
  bc_microcost_params <- as.list(dt_microcost_params$`Base case`)
  names(bc_microcost_params) <- dt_microcost_params$rname
  params <- as.list(unlist(dt_other_params[ , `Base case`]))
  names(params) <- dt_other_params$rname 
  
  
  if(param %in% dt_transitions$rname){
    dt_transitions[rname == param]$value <-  value
  } else if (param %in% names(bc_microcost_params)){
    bc_microcost_params[[param]] <- value
  } else if (param %in% names(params)){
    params[[param]] <- value
  } else {
    print(paste0("error: ", param, " not found."))
    return(NA)
  }
  
  costs_states <- calc_disease_state_costs(bc_microcost_params)
  
  #Get costs for chronic viruses from running Markov models
  costs_states$HIV_np <- hiv_calc_np_cost(costs_states, dt_transitions, params, bc_microcost_params$p_IPmort)
  costs_states$HCV_np <- hcv_calc_np_cost(costs_states, dt_transitions, params, bc_microcost_params$p_IPmort)
  costs_states$HBV_np <- hbv_calc_np_cost(costs_states, dt_transitions, params, bc_microcost_params$p_IPmort)
  
  
  #Format costs_np for model
  ae_acute <- c("sep", "syp", "mal", "ftr")
  costs_np <- costs_states[ae_acute]
  costs_np$hiv <- costs_states$HIV_np
  costs_np$hbv <- costs_states$HBV_np
  costs_np$hcv <- costs_states$HCV_np
  
  return(calc_outcomes(costs_np, params)$net_savings)
}
hiv_calc_np_cost<- function(state_costs, markov_probs, params, IPmort){
  states_hiv <- c('HIV_SC_1', 'HIV_SC_2', 'HIV_SC_3', 'ART_1', 'ART_2', 'ART_3', 'ART_4', 
                  'AIDS_SC', 'AIDS_ART_1', 'AIDS_ART_2', 'HIV_death')
  
  #Create init vector with initial distribution
  #Create init vector with initial distribution
  p_ART_init <- as.numeric(markov_probs[Disease=="HIV" & From == "init" & To == "ART_1", value])
  init_hiv <- rep(0, length(states_hiv)+1)
  names(init_hiv) <- c(states_hiv,"death")
  init_hiv["ART_1"] <- p_ART_init
  init_hiv["HIV_SC_1"] <- 1-p_ART_init
  
  
  #Transition matrices
  t_hiv_peds <- gen_t_matrix(markov_probs, "hiv", "Pediatric")
  t_hiv_adult <- gen_t_matrix(markov_probs, "hiv", "Adult")
  #Run markov model
  HIV_peds <- sim_markov(init_hiv, t_hiv_peds, 
                            age_start=5, 
                            all_cause_mort = all_cause_mort,
                            costs = state_costs$HIV
  )
  HIV_adult <- sim_markov(init_hiv, t_hiv_adult, 
                             age_start=40, 
                             all_cause_mort = all_cause_mort,
                             costs =  state_costs$HIV)
  #Take weighted average of peds and adult
  return((params$p_peds*HIV_peds$np_cost + 
           (1-params$p_peds)*HIV_adult$np_cost)*(1-IPmort))
  
}
hcv_calc_np_cost<- function(state_costs, markov_probs, params, IPmort){
  states_hcv <- c('acute_SC', 'acute_T', 'no_infection', 'chronic_SC', 'chronic_T', 
                  'chronic_TF', 'CC_SC', 'CC_T', 'CC_TF', 'DCC_SC', 'DCC_T', 'DCC_TF', 
                  'HCC', 'HCV_death')
  
  #Create init vector with initial distribution
  p_acute_T <- as.numeric(markov_probs[Disease=="HCV" & From == "init" & To == "acute_T", value])
  init_hcv <- c(1-p_acute_T, p_acute_T, rep(0, length(states_hcv)-1))
  names(init_hcv) <- c(states_hcv,"death")
  
  #Transition matrices
  t_hcv <- gen_t_matrix(markov_probs, "hcv")
  #Run markov model
  HCV_peds <- sim_markov(init_hcv, t_hcv, 
                            age_start=5, 
                            all_cause_mort = all_cause_mort,
                            costs = costs_states$HCV
  )
  HCV_adult <- sim_markov(init_hcv, t_hcv, 
                             age_start=40, 
                             all_cause_mort = all_cause_mort,
                             costs =  costs_states$HCV)

  #Take weighted average of peds and adult
  return((params$p_peds*HCV_peds$np_cost + 
           (1-params$p_peds)*HCV_adult$np_cost)*(1-IPmort))
  
}
hbv_calc_np_cost<- function(state_costs, markov_probs, params, IPmort){
  states_hbv <- c('acute_SC', 'acute_CM', 'imm_tol_SC', 'imm_tol_CM', 'carrier_SC', 
                  'carrier_CM', 'imm_react_SC', 'imm_react_T', 'chronic_SC', 
                  'chronic_CM', 'chronic_T', 'CC_SC', 'CC_T', 'DCC_SC', 'DCC_T', 'HCC', 
                  'no_infection', 'HBV_death')
  
  #Create init vector with initial distribution
  p_acute_CM <- as.numeric(markov_probs[Disease=="HBV" & From == "init" & To == "acute_CM", value])
  init_hbv <- c(1-p_acute_CM, p_acute_CM, rep(0, length(states_hbv)-1))
  #Transition matrices
  t_hbv <- gen_t_matrix(markov_probs, "hbv")
  #Run markov model
  HBV_peds <- sim_markov(init_hbv, t_hbv, 
                            age_start=5, 
                            all_cause_mort = all_cause_mort,
                            costs = costs_states$HBV
  )
  
  
  HBV_adult <- sim_markov(init_hbv, t_hbv, 
                             age_start=40, 
                             all_cause_mort = all_cause_mort,
                             costs =  costs_states$HBV)
  #Take weighted average of peds and adult
  return((params$p_peds*HBV_peds$np_cost + 
           (1-params$p_peds)*HBV_adult$np_cost)*(1-IPmort))
}
calc_costs_by_state <- function(cost_by_state_trace, cohort, disease_state_costs, disease){
  return(
    dt_costs_by_state <- data.table(
      "Disease" = disease,
      "Disease state" = colnames(cost_by_state_trace),
      "Annual cost" = disease_state_costs[colnames(cost_by_state_trace)],
      "Cohort" = cohort,
      "Undiscounted Lifetime cost" = colSums(cost_by_state_trace),
      "Net present lifetime cost" = colSums(cost_by_state_trace *  1.03^(0:(-1*(nrow(cost_by_state_trace)-1))))
    )
  )
}

## Data from file
all_cause_mort <- fread("./data/ghana_allcause_mort.csv")
dt_transitions <- data.table(read_excel("./data/Ghana_hea_parameters.xlsx", sheet = "Markov_probs"))
# transitions <- cbind(dt_transitions)
# transitions[ , value := `Base case`]
dt_microcost_params <- data.table(read_excel("./data/Ghana_hea_parameters.xlsx", sheet = "Microcost_params"))
dt_other_params <- data.table(read_excel("./data/Ghana_hea_parameters.xlsx", sheet = "other_params"))

# # # # #
# RUN BASECASE #################
dt_transitions[ , value := `Base case`]
bc_microcost_params <- as.list(dt_microcost_params$`Base case`)
names(bc_microcost_params) <- dt_microcost_params$rname
costs_states <- calc_disease_state_costs(bc_microcost_params)

#Get other params
params <- as.list(unlist(dt_other_params[ , `Base case`]))
names(params) <- dt_other_params$rname 

#Get costs for chronic viruses from running Markov models
costs_states$HIV_np <- hiv_calc_np_cost(costs_states, dt_transitions, params, bc_microcost_params$p_IPmort)
costs_states$HCV_np <- hcv_calc_np_cost(costs_states, dt_transitions, params, bc_microcost_params$p_IPmort)
costs_states$HBV_np <- hbv_calc_np_cost(costs_states, dt_transitions, params, bc_microcost_params$p_IPmort)


#Format costs_np for model
ae_acute <- c("sep", "syp", "mal", "ftr")
costs_np <- costs_states[ae_acute]
costs_np$hiv <- costs_states$HIV_np
costs_np$hbv <- costs_states$HBV_np
costs_np$hcv <- costs_states$HCV_np

dt_bc_outcomes <- calc_outcomes(costs_np, params)
dt_bc_costs <- rbind(unlist(costs_states))

fwrite(dt_bc_costs, "./results/BC_costs.csv")
fwrite(dt_bc_outcomes, "./results/BC_outcomes.csv")

# # # # #
# RUN PSA #################

n_iter = 10000

for(iter in 1:n_iter){
  
  #Generate microcost inputs from PERT distribution
  microcost_params <- as.list(unlist(dt_microcost_params[ , sample_params(mean = `Base case`, lb = Low, ub = High, dist = Distn, Param1=Param1, Param2=Param2), by=rname]$V1))
  names(microcost_params) <- dt_microcost_params$rname

  #Generate other params from indicated distribution
  params <- as.list(unlist(dt_other_params[ , sample_params(mean = `Base case`, lb = Low, ub = High, dist = Distn, Param1=Param1, Param2=Param2), by=rname]$V1))
  names(params) <- dt_other_params$rname 
  
  #Generate Markov prob inputs drawn from distributions
  markov_probs_not_varied <- dt_transitions[is.na(Low), ]
  markov_probs_not_varied[ , value := `Base case`]
  markov_probs_varied <- dt_transitions[!is.na(Low), ]
  markov_probs_varied[, `Base case` := as.numeric(`Base case`)]
  markov_probs_varied[, value := sample_params(mean = `Base case`, lb = Low, ub = High, dist = Distn, Param1=Param1, Param2=Param2), by=1:nrow(markov_probs_varied)]
  markov_probs <- rbind(markov_probs_not_varied, markov_probs_varied)
  
  
  #Calculate disease state costs
  costs_states <- calc_disease_state_costs(microcost_params)
  
  #Run Markov models
  costs_states$HIV_np <- hiv_calc_np_cost(costs_states, markov_probs, params, microcost_params$p_IPmort)
  costs_states$HCV_np <- hcv_calc_np_cost(costs_states, markov_probs, params, microcost_params$p_IPmort)
  costs_states$HBV_np <- hbv_calc_np_cost(costs_states, markov_probs, params, microcost_params$p_IPmort)
  
  #Format costs_np for model
  ae_acute <- c("sep", "syp", "mal", "ftr")
  costs_np <- costs_states[ae_acute]
  costs_np$hiv <- costs_states$HIV_np
  costs_np$hbv <- costs_states$HBV_np
  costs_np$hcv <- costs_states$HCV_np
  
  dt_outcomes <- calc_outcomes(costs_np, params)
  

  #Add inputs and outputs to data.frames
  if(iter==1){
    dt_PSA_microcost <- as.data.table(microcost_params)
    dt_PSA_params <- as.data.table(params)
    dt_psa_costs <- data.table(rbind(unlist(costs_states)))
    dt_psa_outcomes <- dt_outcomes
  
    
  } else{
    dt_PSA_microcost <- rbind(dt_PSA_microcost,
                            as.data.table(microcost_params))
    dt_PSA_params <- rbind(dt_PSA_params,
                              as.data.table(params))
    dt_psa_costs <- rbind(dt_psa_costs,
                          rbind(unlist(costs_states)))
    dt_psa_outcomes <- rbind(dt_psa_outcomes,
                             dt_outcomes)
  }
  if (iter %% 100 == 0) {print(paste0("Finished iter ", iter))}
}




fwrite(dt_PSA_microcost, "./results/PSA_microcost.csv")
fwrite(dt_PSA_params, "./results/PSA_params.csv")
fwrite(dt_psa_costs, "./results/PSA_costs.csv")
fwrite(dt_psa_outcomes, "./results/PSA_outcomes.csv")
#costs <- costs_states$HBV



# # # #
# Univariate sensitivity analysis ###########

#Form datatable with all parameters
dt_other_params[ , Param_disp := ifelse(is.na(Disease), Parameter, paste0(Disease, " ", Parameter))]
dt_microcost_params[ , Param_disp := ifelse(Disease=="General", paste0(Category,", ",Parameter), paste0(Disease, " ", Category,", ",Parameter))]
dt_transitions[ , rname := paste0("p_",Disease,"_",From,"_",To,"_",Cohort)]
dt_transitions[ , Param_disp := paste0(Disease, " ", From_disp," to ", To_disp)]
dt_transitions_params <- dt_transitions[!is.na(Low)]

dt_univ <- rbind(
  dt_other_params[ , c("rname", "Param_disp", "Base case", "Low", "High")],
  dt_microcost_params[ , c("rname", "Param_disp", "Base case", "Low", "High")],
  dt_transitions_params[ , c("rname", "Param_disp", "Base case", "Low", "High")],
  use.names=FALSE
)



dt_univ[, net_savings_low :=  calc_univariate_change(rname,  Low, dt_transitions, dt_microcost_params, dt_other_params),
        by = rname]
dt_univ[, net_savings_high :=  calc_univariate_change(rname,  High, dt_transitions, dt_microcost_params, dt_other_params),
        by = rname]

dt_univ[ , abs_net_savings_range := abs(net_savings_high - net_savings_low)]


dt_univ <- dt_univ[order(-abs_net_savings_range)]

fwrite(dt_univ, "./results/univ_sens_analysis.csv")

# # # # #
# Analysis of Markov models #############
# # # # #
#Markov trace diagrams
dt_transitions[ , value := `Base case`]
bc_microcost_params <- as.list(dt_microcost_params$`Base case`)
names(bc_microcost_params) <- dt_microcost_params$rname
costs_states <- calc_disease_state_costs(bc_microcost_params)

#Generate other params from indicated distribution
params <- as.list(unlist(dt_other_params[ , `Base case`]))
names(params) <- dt_other_params$rname 

#Get costs for chronic viruses from running Markov models
costs_states$HIV_np <- hiv_calc_np_cost(costs_states, dt_transitions, params, bc_microcost_params$p_IPmort)
costs_states$HCV_np <- hcv_calc_np_cost(costs_states, dt_transitions, params, bc_microcost_params$p_IPmort)
costs_states$HBV_np <- hbv_calc_np_cost(costs_states, dt_transitions, params, bc_microcost_params$p_IPmort)
# HIV 

states_hiv <- c('HIV_SC_1', 'HIV_SC_2', 'HIV_SC_3', 'ART_1', 'ART_2', 'ART_3', 'ART_4', 
                'AIDS_SC', 'AIDS_ART_1', 'AIDS_ART_2', 'HIV_death')

#Create init vector with initial distribution
p_ART_init <- as.numeric(markov_probs[Disease=="HIV" & From == "init" & To == "ART_1", value])
init_hiv <- rep(0, length(states_hiv)+1)
names(init_hiv) <- c(states_hiv,"death")
init_hiv["ART_1"] <- p_ART_init
init_hiv["HIV_SC_1"] <- 1-p_ART_init


t_hiv_peds <- gen_t_matrix(markov_probs, "hiv", "Pediatric")
t_hiv_adult <- gen_t_matrix(markov_probs, "hiv", "Adult")


HIV_peds_bc <- sim_markov(init_hiv, t_hiv_peds, 
                             age_start=5, 
                             all_cause_mort = all_cause_mort,
                          costs = costs_states$HIV
                          )


HIV_adult_bc <- sim_markov(init_hiv, t_hiv_adult, 
                             age_start=40, 
                             all_cause_mort = all_cause_mort,
                           costs =  costs_states$HIV)

HIV_peds_trace <- data.table(HIV_peds_bc$markov_trace, keep.rownames = TRUE)
HIV_peds_trace[ , Age := as.numeric(rn)]
HIV_peds_trace[ , noART := HIV_SC_1+HIV_SC_2+HIV_SC_3]
HIV_peds_trace[ , ART := ART_1+ART_2+ART_3+ART_4]
HIV_peds_trace <- HIV_peds_trace[ , c("Age", "noART", "ART", "AIDS_SC", "HIV_death", "death")]


HIV_peds_trace_melt <- melt(HIV_peds_trace, 
                            id.vars = c("Age"), variable.name = "Disease state",
                            value.name = "Percent of cohort")

HIV_adult_trace <- data.table(HIV_adult_bc$markov_trace, keep.rownames = TRUE)
HIV_adult_trace[ , Age := as.numeric(rn)]
HIV_adult_trace[ , noART := HIV_SC_1+HIV_SC_2+HIV_SC_3]
HIV_adult_trace[ , ART := ART_1+ART_2+ART_3+ART_4]
HIV_adult_trace <- HIV_adult_trace[ , c("Age", "noART", "ART", "AIDS_SC", "HIV_death", "death")]


HIV_adult_trace_melt <- melt(HIV_adult_trace, 
                            id.vars = c("Age"), variable.name = "Disease state",
                            value.name = "Percent of cohort")

HIV_trace_both <- rbind(
  cbind(cohort = "Pediatric", HIV_peds_trace_melt),
  cbind(cohort = "Adult", HIV_adult_trace_melt)
)


dt_chronic_costs_by_state <- calc_costs_by_state(HIV_peds_bc$cost_by_state_trace,
                                                 cohort="Pediatric",
                                                 disease_state_costs = costs_states[["HIV"]], "HIV")


dt_chronic_costs_by_state <- rbind(
  dt_chronic_costs_by_state,
  calc_costs_by_state(HIV_adult_bc$cost_by_state_trace,
                      cohort="Adult",
                      disease_state_costs = costs_states[["HIV"]], "HIV")
)


ggplot(HIV_trace_both)+
  geom_line(aes(x = Age, y = `Percent of cohort`, color = `Disease state`))+
  geom_point(aes(x = Age, y = `Percent of cohort`, color = `Disease state`), size = 1.2)+
  facet_wrap(vars(cohort), ncol=1)+
  theme(legend.position = "bottom")


ggsave("manuscript/figs/hiv_trace.png",
       width=6.5,
       height = 6,
       units="in")

fwrite(HIV_peds_trace, "./results/markov_trace_HIV_peds.csv")
fwrite(HIV_adult_trace, "./results/markov_trace_HIV_peds.csv")





#  #  #  #
# HCV ###########
#  #  #  #

states_hcv <- c('acute_SC', 'acute_T', 'no_infection', 'chronic_SC', 'chronic_T', 
                'chronic_TF', 'CC_SC', 'CC_T', 'CC_TF', 'DCC_SC', 'DCC_T', 'DCC_TF', 
                'HCC', 'HCV_death')

#Create init vector with initial distribution
p_acute_T <- as.numeric(dt_transitions[Disease=="HCV" & From == "init" & To == "acute_T", value])
init_hcv <- c(1-p_acute_T, p_acute_T, rep(0, length(states_hcv)-1))
names(init_hcv) <- c(states_hcv,"death")

#BASE CASE
# transition matrics
t_hcv <- gen_t_matrix(markov_probs, "hcv")

HCV_peds_bc <- sim_markov(init_hcv, t_hcv, 
                          age_start=5, 
                          all_cause_mort = all_cause_mort,
                          costs = costs_states$HCV
)


HCV_adult_bc <- sim_markov(init_hcv, t_hcv, 
                           age_start=40, 
                           all_cause_mort = all_cause_mort,
                           costs =  costs_states$HCV)

HCV_peds_trace <- data.table(HCV_peds_bc$markov_trace, keep.rownames = TRUE)
HCV_peds_trace[ , Age := as.numeric(rn)]
HCV_peds_trace[ , rn := NULL]

HCV_peds_trace_melt <- melt(HCV_peds_trace, 
                            id.vars = c("Age"), variable.name = "Disease state",
                            value.name = "Percent of cohort")

HCV_adult_trace <- data.table(HCV_adult_bc$markov_trace, keep.rownames = TRUE)
HCV_adult_trace[ , Age := as.numeric(rn)]
HCV_adult_trace[ , rn := NULL]


HCV_adult_trace_melt <- melt(HCV_adult_trace, 
                             id.vars = c("Age"), variable.name = "Disease state",
                             value.name = "Percent of cohort")


HCV_trace_both <- rbind(
  cbind(cohort = "Pediatric", HCV_peds_trace_melt),
  cbind(cohort = "Adult", HCV_adult_trace_melt)
)


dt_chronic_costs_by_state <- rbind(
  dt_chronic_costs_by_state,
  calc_costs_by_state(HCV_peds_bc$cost_by_state_trace,
                      cohort="Pediatric",
                      disease_state_costs = costs_states[["HCV"]], "HCV")
)


dt_chronic_costs_by_state <- rbind(
  dt_chronic_costs_by_state,
  calc_costs_by_state(HCV_adult_bc$cost_by_state_trace,
                      cohort="Adult",
                      disease_state_costs = costs_states[["HCV"]], "HCV")
)


ggplot(HCV_trace_both)+
  geom_line(aes(x = Age, y = `Percent of cohort`, color = `Disease state`))+
  geom_point(aes(x = Age, y = `Percent of cohort`, color = `Disease state`), size = 1.2)+
  facet_wrap(vars(cohort), ncol=1)+
  theme(legend.position = "bottom")

ggsave("./manuscript/figs/hcv_trace.png",
       width=6.5,
       height = 7,
       units="in")

fwrite(HCV_peds_trace, "./results/markov_trace_HCV_peds.csv")
fwrite(HCV_adult_trace, "./results/markov_trace_HCV_peds.csv")
#  #  #  #
# HBV ###########
#  #  #  #

states_hbv <- c('acute_SC', 'acute_CM', 'imm_tol_SC', 'imm_tol_CM', 'carrier_SC', 
                'carrier_CM', 'imm_react_SC', 'imm_react_T', 'chronic_SC', 
                'chronic_CM', 'chronic_T', 'CC_SC', 'CC_T', 'DCC_SC', 'DCC_T', 'HCC', 
                'no_infection', 'HBV_death')

#Create init vector with initial distribution
p_acute_CM <- as.numeric(dt_transitions[Disease=="HBV" & From == "init" & To == "acute_CM", value])
init_hbv <- c(1-p_acute_CM, p_acute_CM, rep(0, length(states_hbv)-1))





# transition matrics
t_hbv <- gen_t_matrix(markov_probs, "hbv")



HBV_peds_bc <- sim_markov(init_hbv, t_hbv, 
                          age_start=5, 
                          all_cause_mort = all_cause_mort,
                          costs = costs_states$HBV
)


HBV_adult_bc <- sim_markov(init_hbv, t_hbv, 
                           age_start=40, 
                           all_cause_mort = all_cause_mort,
                           costs =  costs_states$HBV)

HBV_peds_trace <- data.table(HBV_peds_bc$markov_trace, keep.rownames = TRUE)
HBV_peds_trace[ , Age := as.numeric(rn)]
HBV_peds_trace[ , rn := NULL]

HBV_peds_trace_melt <- melt(HBV_peds_trace,
                            id.vars = c("Age"), variable.name = "Disease state",
                            value.name = "Percent of cohort")

HBV_adult_trace <- data.table(HBV_adult_bc$markov_trace, keep.rownames = TRUE)
HBV_adult_trace[ , Age := as.numeric(rn)]
HBV_adult_trace[ , rn := NULL]


HBV_adult_trace_melt <- melt(HBV_adult_trace,
                             id.vars = c("Age"), variable.name = "Disease state",
                             value.name = "Percent of cohort")


HBV_trace_both <- rbind(
  cbind(cohort = "Pediatric", HBV_peds_trace_melt),
  cbind(cohort = "Adult", HBV_adult_trace_melt)
)


dt_chronic_costs_by_state <- rbind(
  dt_chronic_costs_by_state,
  calc_costs_by_state(HBV_peds_bc$cost_by_state_trace,
                      cohort="Pediatric",
                      disease_state_costs = costs_states[["HBV"]], "HBV")
)


dt_chronic_costs_by_state <- rbind(
  dt_chronic_costs_by_state,
  calc_costs_by_state(HBV_adult_bc$cost_by_state_trace,
                      cohort="Adult",
                      disease_state_costs = costs_states[["HBV"]], "HBV")
)



ggplot(HBV_trace_both)+
  geom_line(aes(x = Age, y = `Percent of cohort`, color = `Disease state`))+
  geom_point(aes(x = Age, y = `Percent of cohort`, color = `Disease state`), size = 1.2)+
  facet_wrap(vars(cohort), ncol=1)+
  theme(legend.position = "bottom")

ggsave("manuscript/figs/hbv_trace.png",
       width=6.5,
       height = 7,
       units="in")
fwrite(HBV_peds_trace, "./results/markov_trace_HBV_peds.csv")
fwrite(HBV_adult_trace, "./results/markov_trace_HBV_peds.csv")

fwrite(dt_chronic_costs_by_state, "./results/chronic_costs_by_disease_state.csv")
